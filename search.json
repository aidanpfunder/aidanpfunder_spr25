[
  {
    "objectID": "250_Projects/project4.html",
    "href": "250_Projects/project4.html",
    "title": "Client Report - Can You Predict That?",
    "section": "",
    "text": "Show the code\nimport pandas as pd \nimport numpy as np\nfrom lets_plot import *\n# add the additional libraries you need to import for ML here\n\nLetsPlot.setup_html(isolated_frame=True)\nShow the code\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\n\n# import your data here using pandas and the URL",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project4.html#elevator-pitch",
    "href": "250_Projects/project4.html#elevator-pitch",
    "title": "Client Report - Can You Predict That?",
    "section": "Elevator pitch",
    "text": "Elevator pitch\nA SHORT (2-3 SENTENCES) PARAGRAPH THAT DESCRIBES KEY INSIGHTS TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS. (Note: this is not a summary of the project, but a summary of the results.)\nA Client has requested this analysis and this is your one shot of what you would say to your boss in a 2 min elevator ride before he takes your report and hands it to the client.",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project4.html#questiontask-1",
    "href": "250_Projects/project4.html#questiontask-1",
    "title": "Client Report - Can You Predict That?",
    "section": "QUESTION|TASK 1",
    "text": "QUESTION|TASK 1\nCreate 2-3 charts that evaluate potential relationships between the home variables and before1980. Explain what you learn from the charts that could help a machine learning algorithm.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project4.html#questiontask-2",
    "href": "250_Projects/project4.html#questiontask-2",
    "title": "Client Report - Can You Predict That?",
    "section": "QUESTION|TASK 2",
    "text": "QUESTION|TASK 2\nBuild a classification model labeling houses as being built “before 1980” or “during or after 1980”. Your goal is to reach or exceed 90% accuracy. Explain your final model choice (algorithm, tuning parameters, etc) and describe what other models you tried.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project4.html#questiontask-3",
    "href": "250_Projects/project4.html#questiontask-3",
    "title": "Client Report - Can You Predict That?",
    "section": "QUESTION|TASK 3",
    "text": "QUESTION|TASK 3\nJustify your classification model by discussing the most important features selected by your model. This discussion should include a feature importance chart and a description of the features.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project4.html#questiontask-4",
    "href": "250_Projects/project4.html#questiontask-4",
    "title": "Client Report - Can You Predict That?",
    "section": "QUESTION|TASK 4",
    "text": "QUESTION|TASK 4\nDescribe the quality of your classification model using 2-3 different evaluation metrics. You also need to explain how to interpret each of the evaluation metrics you use.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project4.html#stretch-questiontask-1",
    "href": "250_Projects/project4.html#stretch-questiontask-1",
    "title": "Client Report - Can You Predict That?",
    "section": "STRETCH QUESTION|TASK 1",
    "text": "STRETCH QUESTION|TASK 1\nRepeat the classification model using 3 different algorithms. Display their Feature Importance, and Decision Matrix. Explian the differences between the models and which one you would recommend to the Client.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project4.html#stretch-questiontask-2",
    "href": "250_Projects/project4.html#stretch-questiontask-2",
    "title": "Client Report - Can You Predict That?",
    "section": "STRETCH QUESTION|TASK 2",
    "text": "STRETCH QUESTION|TASK 2\nJoin the dwellings_neighborhoods_ml.csv data to the dwelling_ml.csv on the parcel column to create a new dataset. Duplicate the code for the stretch question above and update it to use this data. Explain the differences and if this changes the model you recomend to the Client.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project4.html#stretch-questiontask-3",
    "href": "250_Projects/project4.html#stretch-questiontask-3",
    "title": "Client Report - Can You Predict That?",
    "section": "STRETCH QUESTION|TASK 3",
    "text": "STRETCH QUESTION|TASK 3\nCan you build a model that predicts the year a house was built? Explain the model and the evaluation metrics you would use to determine if the model is good.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 4"
    ]
  },
  {
    "objectID": "250_Projects/project5.html",
    "href": "250_Projects/project5.html",
    "title": "Client Report - The War with Star Wars",
    "section": "",
    "text": "Show the code\nimport pandas as pd \nimport numpy as np\nfrom lets_plot import *\n# add the additional libraries you need to import for ML here\n\nLetsPlot.setup_html(isolated_frame=True)\nShow the code\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\n\n# import your data here using pandas and the URL",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "250_Projects/project5.html#elevator-pitch",
    "href": "250_Projects/project5.html#elevator-pitch",
    "title": "Client Report - The War with Star Wars",
    "section": "Elevator pitch",
    "text": "Elevator pitch\nA SHORT (2-3 SENTENCES) PARAGRAPH THAT DESCRIBES KEY INSIGHTS TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS. (Note: this is not a summary of the project, but a summary of the results.)\nA Client has requested this analysis and this is your one shot of what you would say to your boss in a 2 min elevator ride before he takes your report and hands it to the client.",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "250_Projects/project5.html#questiontask-1",
    "href": "250_Projects/project5.html#questiontask-1",
    "title": "Client Report - The War with Star Wars",
    "section": "QUESTION|TASK 1",
    "text": "QUESTION|TASK 1\nShorten the column names and clean them up for easier use with pandas. Provide a table or list that exemplifies how you fixed the names.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "250_Projects/project5.html#questiontask-2",
    "href": "250_Projects/project5.html#questiontask-2",
    "title": "Client Report - The War with Star Wars",
    "section": "QUESTION|TASK 2",
    "text": "QUESTION|TASK 2\nClean and format the data so that it can be used in a machine learning model. As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.\na. Filter the dataset to respondents that have seen at least one film\na. Create a new column that converts the age ranges to a single number. Drop the age range categorical column\na. Create a new column that converts the education groupings to a single number. Drop the school categorical column\na. Create a new column that converts the income ranges to a single number. Drop the income range categorical column\na. Create your target (also known as “y” or “label”) column based on the new income range column\na. One-hot encode all remaining categorical columns\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here\n\n\n\n\nShow the code\n# Include and execute your code here\n\n\n\n\nShow the code\n# Include and execute your code here\n\n\n\n\nShow the code\n# Include and execute your code here\n\n\n\n\nShow the code\n# Include and execute your code here\n\n\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "250_Projects/project5.html#questiontask-3",
    "href": "250_Projects/project5.html#questiontask-3",
    "title": "Client Report - The War with Star Wars",
    "section": "QUESTION|TASK 3",
    "text": "QUESTION|TASK 3\nValidate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here\n\n\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "250_Projects/project5.html#questiontask-4",
    "href": "250_Projects/project5.html#questiontask-4",
    "title": "Client Report - The War with Star Wars",
    "section": "QUESTION|TASK 4",
    "text": "QUESTION|TASK 4\nBuild a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "250_Projects/project5.html#stretch-questiontask-1",
    "href": "250_Projects/project5.html#stretch-questiontask-1",
    "title": "Client Report - The War with Star Wars",
    "section": "STRETCH QUESTION|TASK 1",
    "text": "STRETCH QUESTION|TASK 1\nBuild a machine learning model that predicts whether a person makes more than $50k. With accuracy of at least 65%. Describe your model and report the accuracy.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "250_Projects/project5.html#stretch-questiontask-2",
    "href": "250_Projects/project5.html#stretch-questiontask-2",
    "title": "Client Report - The War with Star Wars",
    "section": "STRETCH QUESTION|TASK 2",
    "text": "STRETCH QUESTION|TASK 2\nValidate the data provided on GitHub lines up with the article by recreating a 3rd visual from the article.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "250_Projects/project5.html#stretch-questiontask-3",
    "href": "250_Projects/project5.html#stretch-questiontask-3",
    "title": "Client Report - The War with Star Wars",
    "section": "STRETCH QUESTION|TASK 3",
    "text": "STRETCH QUESTION|TASK 3\nCreate a new column that converts the location groupings to a single number. Drop the location categorical column.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 5"
    ]
  },
  {
    "objectID": "Templates/P2_Baseball.html",
    "href": "Templates/P2_Baseball.html",
    "title": "Client Report - Finding Relationships in Baseball",
    "section": "",
    "text": "Have you ever wondered what secrets lie hidden in the data behind baseball? I’ve written custom SQL queries in Python to show the standout players from BYU-Idaho, calculate batting averages, and compare average salaries between top teams like the Yankees and Red Sox.\nShow the code\nimport pandas as pd \nimport numpy as np\nimport sqlite3\nfrom lets_plot import *\n\nLetsPlot.setup_html(isolated_frame=True)\nShow the code\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\nsqlite_file = 'lahmansbaseballdb.sqlite'\n# this file must be in the same location as your .qmd or .py file\ncon = sqlite3.connect(sqlite_file)"
  },
  {
    "objectID": "Templates/P2_Baseball.html#questiontask-1",
    "href": "Templates/P2_Baseball.html#questiontask-1",
    "title": "Client Report - Finding Relationships in Baseball",
    "section": "QUESTION|TASK 1",
    "text": "QUESTION|TASK 1\nWrite an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.\ntype your results and analysis here\n\n\nShow the code\nquery_byu_idaho_salaries = \"\"\"\nSELECT\n  collegeplaying.playerID,\n  collegeplaying.schoolID,\n  salaries.salary,\n  salaries.yearID,\n  salaries.teamID\nFROM collegeplaying\nJOIN salaries\n  ON collegeplaying.playerID = salaries.playerID\nWHERE collegeplaying.schoolID = 'idbyuid'\nORDER BY salaries.salary DESC;\n\"\"\"\ndf_byu_idaho_salaries = pd.read_sql_query(query_byu_idaho_salaries, con)\nprint(df_byu_idaho_salaries)\n\n\n     playerID schoolID     salary  yearID teamID\n0   lindsma01  idbyuid  4000000.0    2014    CHA\n1   lindsma01  idbyuid  4000000.0    2014    CHA\n2   lindsma01  idbyuid  3600000.0    2012    BAL\n3   lindsma01  idbyuid  3600000.0    2012    BAL\n4   lindsma01  idbyuid  2800000.0    2011    COL\n5   lindsma01  idbyuid  2800000.0    2011    COL\n6   lindsma01  idbyuid  2300000.0    2013    CHA\n7   lindsma01  idbyuid  2300000.0    2013    CHA\n8   lindsma01  idbyuid  1625000.0    2010    HOU\n9   lindsma01  idbyuid  1625000.0    2010    HOU\n10  stephga01  idbyuid  1025000.0    2001    SLN\n11  stephga01  idbyuid  1025000.0    2001    SLN\n12  stephga01  idbyuid   900000.0    2002    SLN\n13  stephga01  idbyuid   900000.0    2002    SLN\n14  stephga01  idbyuid   800000.0    2003    SLN\n15  stephga01  idbyuid   800000.0    2003    SLN\n16  stephga01  idbyuid   550000.0    2000    SLN\n17  stephga01  idbyuid   550000.0    2000    SLN\n18  lindsma01  idbyuid   410000.0    2009    FLO\n19  lindsma01  idbyuid   410000.0    2009    FLO\n20  lindsma01  idbyuid   395000.0    2008    FLO\n21  lindsma01  idbyuid   395000.0    2008    FLO\n22  lindsma01  idbyuid   380000.0    2007    FLO\n23  lindsma01  idbyuid   380000.0    2007    FLO\n24  stephga01  idbyuid   215000.0    1999    SLN\n25  stephga01  idbyuid   215000.0    1999    SLN\n26  stephga01  idbyuid   185000.0    1998    PHI\n27  stephga01  idbyuid   185000.0    1998    PHI\n28  stephga01  idbyuid   150000.0    1997    PHI\n29  stephga01  idbyuid   150000.0    1997    PHI"
  },
  {
    "objectID": "Templates/P2_Baseball.html#questiontask-2",
    "href": "Templates/P2_Baseball.html#questiontask-2",
    "title": "Client Report - Finding Relationships in Baseball",
    "section": "QUESTION|TASK 2",
    "text": "QUESTION|TASK 2\nThis three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)\na. Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.\na. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.\na. Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.\ntype your results and analysis here\n\n\nShow the code\nquery_season_batting_ab1 = \"\"\"\nSELECT\n  playerID,\n  yearID,\n  CAST(H AS FLOAT) / AB AS batting_avg\nFROM batting\nWHERE AB &gt;= 1\nORDER BY batting_avg DESC, playerID\nLIMIT 5;\n\"\"\"\ndf_season_batting_ab1 = pd.read_sql_query(query_season_batting_ab1, con)\nprint(df_season_batting_ab1)\n\n\n    playerID  yearID  batting_avg\n0   aberal01    1957          1.0\n1  abernte02    1960          1.0\n2  abramge01    1923          1.0\n3  acklefr01    1964          1.0\n4  alanirj01    2019          1.0\n\n\n\n\nShow the code\nquery_season_batting_ab10 = \"\"\"\nSELECT\n  playerID,\n  yearID,\n  CAST(H AS FLOAT) / AB AS batting_avg\nFROM batting\nWHERE AB &gt;= 10\nORDER BY batting_avg DESC, playerID\nLIMIT 5;\n\"\"\"\ndf_season_batting_ab10 = pd.read_sql_query(query_season_batting_ab10, con)\nprint(df_season_batting_ab10)\n\n\n    playerID  yearID  batting_avg\n0  nymanny01    1974     0.642857\n1  carsoma01    2013     0.636364\n2  altizda01    1910     0.600000\n3  johnsde01    1975     0.600000\n4  silvech01    1948     0.571429\n\n\n\n\nShow the code\nquery_career_batting_avg = \"\"\"\nSELECT\n  playerID,\n  SUM(H)   AS total_hits,\n  SUM(AB)  AS total_at_bats,\n  SUM(H)*1.0/SUM(AB) AS batting_avg\nFROM batting\nGROUP BY playerID\nHAVING SUM(AB) &gt;= 100\nORDER BY batting_avg DESC\nLIMIT 5\n\"\"\"\ndf_career_batting_avg = pd.read_sql_query(query_career_batting_avg, con)\nprint(df_career_batting_avg)\n\n\n    playerID  total_hits  total_at_bats  batting_avg\n0   cobbty01        4189          11436     0.366299\n1  barnero01         860           2391     0.359682\n2  hornsro01        2930           8173     0.358497\n3  jacksjo01        1772           4981     0.355752\n4  meyerle01         513           1443     0.355509"
  },
  {
    "objectID": "Templates/P2_Baseball.html#questiontask-3",
    "href": "Templates/P2_Baseball.html#questiontask-3",
    "title": "Client Report - Finding Relationships in Baseball",
    "section": "QUESTION|TASK 3",
    "text": "QUESTION|TASK 3\nPick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Lets-Plot to visualize the comparison. What do you learn?\nI compared the average salaries between the Boston Red Sox and the New York Yankees. I learned that the New York Yankees have started paying their players significantly mkore on average since 2002. Both teams have increased their average salaries over time.\n\n\nShow the code\nfrom lets_plot import *\nLetsPlot.setup_html(isolated_frame=True)\n\nquery_team_salary = \"\"\"\nSELECT\n  yearID,\n  teamID,\n  AVG(salary) AS avg_salary\nFROM salaries\nWHERE teamID IN ('NYA', 'BOS')\nGROUP BY yearID, teamID\nORDER BY yearID, teamID;\n\"\"\"\ndf_team_salary = pd.read_sql_query(query_team_salary, con)\nprint(df_team_salary)\n\nplot_salary_compare = (\n    ggplot(df_team_salary, aes(x='yearID', y='avg_salary', fill='teamID')) +\n    geom_bar(stat='identity', position='dodge') +\n    labs(\n      x = \"Season Year\",\n      y = \"Average Salary\",\n      title = \"Average Player Salary: Yankees vs Red Sox\"\n    )\n)\nplot_salary_compare.show()\n\n\n    yearID teamID    avg_salary\n0     1985    BOS  4.359024e+05\n1     1985    NYA  7.119102e+05\n2     1986    BOS  4.966289e+05\n3     1986    NYA  6.605090e+05\n4     1987    BOS  6.762778e+05\n..     ...    ...           ...\n59    2014    NYA  8.230996e+06\n60    2015    BOS  5.659481e+06\n61    2015    NYA  7.336274e+06\n62    2016    BOS  6.501578e+06\n63    2016    NYA  7.689579e+06\n\n[64 rows x 3 columns]"
  },
  {
    "objectID": "Templates/P2_Baseball.html#stretch-questiontask-1",
    "href": "Templates/P2_Baseball.html#stretch-questiontask-1",
    "title": "Client Report - Finding Relationships in Baseball",
    "section": "STRETCH QUESTION|TASK 1",
    "text": "STRETCH QUESTION|TASK 1\nAdvanced Salary Distribution by Position (with Case Statement):\n* Write an SQL query that provides a summary table showing the average salary for each position (e.g., pitcher, catcher, outfielder). Position information can be found in the fielding table in the POS column. \n\n    Include the following columns:\n\n    * position\n    * average_salary\n    * total_players\n    * highest_salary  \n\n* The highest_salary column should display the highest salary ever earned by a player in that position. \n\n* Additionally, create a new column called salary_category using a case statement:  \n\n    * If the average salary is above $3 million, categorize it as “High Salary.”\n    * If the average salary is between $2 million and $3 million, categorize it as “Medium Salary.”\n    * Otherwise, categorize it as “Low Salary.”  \n\n* Order the table by average salary in descending order.\n\n**Hint:** Beware, it is common for a player to play multiple positions in a single year. For this analysis, each player’s salary should only be counted toward one position in a given year: the position at which they played the most games that year. This will likely require a (sub-query)[https://docs.data.world/documentation/sql/concepts/advanced/WITH.html].\nThis shows that first base players have the highest average salary for baseball players. It is interested that although the highest paid player is a pitcher, pitchers rank 4th according to average salaries. This may be because pitcher has the highest number of players, meaning that they cannot all be top earners.\n\n\nShow the code\nquery_salary_by_position_named = \"\"\"\nWITH primary_pos AS (\n  SELECT\n    playerID,\n    yearID,\n    POS       AS pos,\n    SUM(G)    AS games_played,\n    ROW_NUMBER() OVER (\n      PARTITION BY playerID, yearID\n      ORDER BY SUM(G) DESC\n    ) AS rn\n  FROM fielding\n  GROUP BY playerID, yearID, POS\n)\nSELECT\n  CASE primary_pos.pos\n    WHEN 'P'  THEN 'Pitcher'\n    WHEN 'C'  THEN 'Catcher'\n    WHEN '1B' THEN 'First Base'\n    WHEN '2B' THEN 'Second Base'\n    WHEN 'SS' THEN 'Shortstop'\n    WHEN '3B' THEN 'Third Base'\n    WHEN 'LF' THEN 'Left Field'\n    WHEN 'CF' THEN 'Center Field'\n    WHEN 'RF' THEN 'Right Field'\n    WHEN 'DH' THEN 'Designated Hitter'\n    ELSE primary_pos.pos\n  END AS position,\n  AVG(salaries.salary)               AS average_salary,\n  COUNT(DISTINCT salaries.playerID)  AS total_players,\n  MAX(salaries.salary)               AS highest_salary,\n  CASE\n    WHEN AVG(salaries.salary) &gt; 3000000 THEN 'High Salary'\n    WHEN AVG(salaries.salary) &gt;= 2000000 THEN 'Medium Salary'\n    ELSE 'Low Salary'\n  END AS salary_category\nFROM salaries\nJOIN primary_pos\n  ON salaries.playerID = primary_pos.playerID\n AND salaries.yearID   = primary_pos.yearID\nWHERE primary_pos.rn = 1\nGROUP BY position\nORDER BY average_salary DESC;\n\"\"\"\n\ndf_salary_by_position_named = pd.read_sql_query(query_salary_by_position_named, con)\nprint(df_salary_by_position_named)\n\n\n      position  average_salary  total_players  highest_salary salary_category\n0   First Base    3.380780e+06            454      28000000.0     High Salary\n1           OF    2.396919e+06           1128      27328046.0   Medium Salary\n2   Third Base    2.323326e+06            490      33000000.0   Medium Salary\n3    Shortstop    1.973604e+06            377      22600000.0      Low Salary\n4      Pitcher    1.938131e+06           2556      33000000.0      Low Salary\n5  Second Base    1.821074e+06            478      24000000.0      Low Salary\n6      Catcher    1.430338e+06            403      23000000.0      Low Salary"
  },
  {
    "objectID": "Templates/P2_Baseball.html#stretch-questiontask-2",
    "href": "Templates/P2_Baseball.html#stretch-questiontask-2",
    "title": "Client Report - Finding Relationships in Baseball",
    "section": "STRETCH QUESTION|TASK 2",
    "text": "STRETCH QUESTION|TASK 2\nAdvanced Career Longevity and Performance (with Subqueries):\n* Calculate the average career length (in years) for players who have played at least **10 games**. Then, identify the top 10 players with the longest careers (based on the number of years they played). Include their: \n\n    * playerID\n    * first_name\n    * last_name\n    * career_length\n\n* The career_length should be calculated as the difference between the maximum and minimum yearID for each player.  \nThe top ten longest carreers for baseball players is dominated by older players. Of the ten, six of them began their careers in the 1800s with two more beginning before 1904. The player with the logest career is Jim O’Rourke with 32 years, who began his career in 1872. This could be a sign that modern players do not last as long in their career due to more intense play or stricter work out regiments.\n\n\nShow the code\nquery_career_longevity_with_start = \"\"\"\nWITH career_stats AS (\n  SELECT\n    playerID,\n    MIN(yearID)               AS first_year,\n    MAX(yearID)               AS last_year,\n    (MAX(yearID) - MIN(yearID)) AS career_length,\n    SUM(G)                    AS total_games\n  FROM fielding\n  GROUP BY playerID\n  HAVING SUM(G) &gt;= 10\n)\nSELECT\n  cs.playerID,\n  p.nameFirst     AS first_name,\n  p.nameLast      AS last_name,\n  cs.first_year   AS start_year,\n  cs.career_length\nFROM career_stats AS cs\nJOIN people AS p\n  ON cs.playerID = p.playerID\nORDER BY cs.career_length DESC\nLIMIT 10;\n\"\"\"\n\ndf_career_longevity_with_start = pd.read_sql_query(query_career_longevity_with_start, con)\nprint(df_career_longevity_with_start)\n\n\n    playerID first_name last_name  start_year  career_length\n0  orourji01        Jim  O'Rourke        1872             32\n1  altroni01       Nick   Altrock        1898             31\n2  lathaar01      Arlie    Latham        1880             29\n3  mcguide01     Deacon   McGuire        1884             28\n4  eversjo01     Johnny     Evers        1902             27\n5  jennihu01     Hughie  Jennings        1891             27\n6   ryanno01      Nolan      Ryan        1966             27\n7  streega01      Gabby    Street        1904             27\n8  ansonca01        Cap     Anson        1871             26\n9   johnto01      Tommy      John        1963             26"
  },
  {
    "objectID": "Templates/ds250_coding_challenge_template.html",
    "href": "Templates/ds250_coding_challenge_template.html",
    "title": "Coding Challenge",
    "section": "",
    "text": "Show the code\n# Read in libraries\nimport pandas as pd\nimport numpy as np\nfrom lets_plot import *\n\nLetsPlot.setup_html(isolated_frame=True)\nShow the code\n# Read in the names data\nurl = \"https://github.com/byuidatascience/data4names/raw/master/data-raw/names_year/names_year.csv\"\nnames = pd.read_csv(url)"
  },
  {
    "objectID": "Templates/ds250_coding_challenge_template.html#question",
    "href": "Templates/ds250_coding_challenge_template.html#question",
    "title": "Coding Challenge",
    "section": "Question #:",
    "text": "Question #:\n\n[Replace with the text from question #]\n\n\nShow the code\n# Question # Code\n\n\nWhen done with a question, render it to a .html file and upload it for the question. Either re-downolad this template or file -&gt; save as -&gt; a new file name and then replace the text in the question with the new question text."
  },
  {
    "objectID": "Templates/ds250_project_template_clean.html",
    "href": "Templates/ds250_project_template_clean.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "paste your elevator pitch here A SHORT (4-5 SENTENCES) PARAGRAPH THAT DESCRIBES KEY INSIGHTS TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS.\n\n\nRead and format project data\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\ndf = pd.read_csv(\"https://github.com/byuidatascience/data4names/raw/master/data-raw/names_year/names_year.csv\")\n\n\nHighlight the Questions and Tasks"
  },
  {
    "objectID": "Templates/ds250_project_template_clean.html#elevator-pitch",
    "href": "Templates/ds250_project_template_clean.html#elevator-pitch",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "paste your elevator pitch here A SHORT (4-5 SENTENCES) PARAGRAPH THAT DESCRIBES KEY INSIGHTS TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS.\n\n\nRead and format project data\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\ndf = pd.read_csv(\"https://github.com/byuidatascience/data4names/raw/master/data-raw/names_year/names_year.csv\")\n\n\nHighlight the Questions and Tasks"
  },
  {
    "objectID": "Templates/ds250_project_template_clean.html#questiontask-1",
    "href": "Templates/ds250_project_template_clean.html#questiontask-1",
    "title": "Client Report - [Insert Project Title]",
    "section": "QUESTION|TASK 1",
    "text": "QUESTION|TASK 1\nCOPY PASTE QUESTION|TASK 1 FROM THE PROJECT HERE\ntype your results and analysis here\n\n\nRead and format data\n# Include and execute your code here\n\n\ninclude figures in chunks and discuss your findings in the figure.\n\n\nplot example\n# Include and execute your code here\n(\n  ggplot(df.head(200), aes(x='name', y='AK')) + geom_bar(stat='identity')\n)\n\n\n\n   \n       \n       \n       \n   \n   \n          \n   \n   \n\nMy useless chart\n\n\n\n\ntable example\n# Include and execute your code here\nmydat = (df.head(1000)\n    .groupby('year')\n    .sum()\n    .reset_index()\n    .tail(10)\n    .filter([\"year\", \"AK\",\"AR\"])\n)\ndisplay(mydat)\n\n\n\n\n\n\nNot much of a table\n\n\n\nyear\nAK\nAR\n\n\n\n\n96\n2006\n21.0\n183.0\n\n\n97\n2007\n28.0\n153.0\n\n\n98\n2008\n36.0\n212.0\n\n\n99\n2009\n34.0\n179.0\n\n\n100\n2010\n22.0\n196.0\n\n\n101\n2011\n41.0\n148.0\n\n\n102\n2012\n28.0\n140.0\n\n\n103\n2013\n26.0\n134.0\n\n\n104\n2014\n20.0\n114.0\n\n\n105\n2015\n28.0\n121.0"
  },
  {
    "objectID": "Templates/ds250_project_template_clean.html#questiontask-2",
    "href": "Templates/ds250_project_template_clean.html#questiontask-2",
    "title": "Client Report - [Insert Project Title]",
    "section": "QUESTION|TASK 2",
    "text": "QUESTION|TASK 2\nCOPY PASTE QUESTION|TASK 2 FROM THE PROJECT HERE\ntype your results and analysis here\n\n\nRead and format data\n# Include and execute your code here\n\n\ninclude figures in chunks and discuss your findings in the figure.\n\n\nplot example\n# Include and execute your code here\n# (\n#   ggplot(df.head(200), aes(x='name', y='AK')) + geom_bar(stat='identity')\n# )\n\n\n\n\ntable example\n# Include and execute your code here\n# mydat = df.head(1000)\\\n#     .groupby('year')\\\n#     .sum()\\\n#     .reset_index()\\\n#     .tail(10)\\\n#     .filter([\"year\", \"AK\",\"AR\"])\n\n# display(mydat)"
  },
  {
    "objectID": "Templates/ds250_project_template_clean.html#questiontask-3",
    "href": "Templates/ds250_project_template_clean.html#questiontask-3",
    "title": "Client Report - [Insert Project Title]",
    "section": "QUESTION|TASK 3",
    "text": "QUESTION|TASK 3\nCOPY PASTE QUESTION|TASK 3 FROM THE PROJECT HERE\ntype your results and analysis here\n\n\nRead and format data\n# Include and execute your code here\n\n\ninclude figures in chunks and discuss your findings in the figure.\n\n\nplot example\n# Include and execute your code here\n# Include and execute your code here\n# (\n#   ggplot(df.head(200), aes(x='name', y='AK')) + geom_bar(stat='identity')\n# )\n\n\n\n\ntable example\n# Include and execute your code here\n# mydat = df.head(1000)\\\n#     .groupby('year')\\\n#     .sum()\\\n#     .reset_index()\\\n#     .tail(10)\\\n#     .filter([\"year\", \"AK\",\"AR\"])\n\n# display(mydat)"
  },
  {
    "objectID": "Templates/ds250_project_template_clean.html#questiontask-4",
    "href": "Templates/ds250_project_template_clean.html#questiontask-4",
    "title": "Client Report - [Insert Project Title]",
    "section": "QUESTION|TASK 4",
    "text": "QUESTION|TASK 4\nCOPY PASTE QUESTION|TASK 3 FROM THE PROJECT HERE\ntype your results and analysis here\n\n\nRead and format data\n# Include and execute your code here\n\n\ninclude figures in chunks and discuss your findings in the figure.\n\n\nplot example\n# Include and execute your code here\n# Include and execute your code here\n# (\n#   ggplot(df.head(200), aes(x='name', y='AK')) + geom_bar(stat='identity')\n# )\n\n\n\n\ntable example\n# Include and execute your code here\n# mydat = df.head(1000)\\\n#     .groupby('year')\\\n#     .sum()\\\n#     .reset_index()\\\n#     .tail(10)\\\n#     .filter([\"year\", \"AK\",\"AR\"])\n\n# display(mydat)"
  },
  {
    "objectID": "Templates/ds250_project_template_clean.html#questiontask-5",
    "href": "Templates/ds250_project_template_clean.html#questiontask-5",
    "title": "Client Report - [Insert Project Title]",
    "section": "QUESTION|TASK 5",
    "text": "QUESTION|TASK 5\nCOPY PASTE QUESTION|TASK 3 FROM THE PROJECT HERE\ntype your results and analysis here\n\n\nRead and format data\n# Include and execute your code here\n\n\ninclude figures in chunks and discuss your findings in the figure.\n\n\nplot example\n# Include and execute your code here\n# Include and execute your code here\n# (\n#   ggplot(df.head(200), aes(x='name', y='AK')) + geom_bar(stat='identity')\n# )\n\n\n\n\ntable example\n# Include and execute your code here\n# mydat = df.head(1000)\\\n#     .groupby('year')\\\n#     .sum()\\\n#     .reset_index()\\\n#     .tail(10)\\\n#     .filter([\"year\", \"AK\",\"AR\"])\n\n# display(mydat)"
  },
  {
    "objectID": "Templates/P0_template.html",
    "href": "Templates/P0_template.html",
    "title": "Client Report - Project 0: Introduction",
    "section": "",
    "text": "Show the code\nimport pandas as pd\nimport numpy as np\nfrom lets_plot import *\n\nLetsPlot.setup_html(isolated_frame=True)\nShow the code\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\nfrom palmerpenguins import load_penguins\ndf = load_penguins()"
  },
  {
    "objectID": "Templates/P0_template.html#questiontask-1",
    "href": "Templates/P0_template.html#questiontask-1",
    "title": "Client Report - Project 0: Introduction",
    "section": "QUESTION|TASK 1",
    "text": "QUESTION|TASK 1\nInclude the tables created from PY4DS: CH2 Data Visualization used to create the above chart (Hint: copy the code from 2.2.1. The penguins data frame and paste each in the cells below)\n\n\nShow the code\npenguins = load_penguins()\npenguins\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n339\nChinstrap\nDream\n55.8\n19.8\n207.0\n4000.0\nmale\n2009\n\n\n340\nChinstrap\nDream\n43.5\n18.1\n202.0\n3400.0\nfemale\n2009\n\n\n341\nChinstrap\nDream\n49.6\n18.2\n193.0\n3775.0\nmale\n2009\n\n\n342\nChinstrap\nDream\n50.8\n19.0\n210.0\n4100.0\nmale\n2009\n\n\n343\nChinstrap\nDream\n50.2\n18.7\n198.0\n3775.0\nfemale\n2009\n\n\n\n\n344 rows × 8 columns\n\n\n\nThe penguins data frame\n\n\nShow the code\npenguins.head()\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007"
  },
  {
    "objectID": "Templates/P0_template.html#questiontask-2",
    "href": "Templates/P0_template.html#questiontask-2",
    "title": "Client Report - Project 0: Introduction",
    "section": "QUESTION|TASK 2",
    "text": "QUESTION|TASK 2\nRecreate the example charts from PY4DS: CH2 Data Visualization of the textbook. (Hint: copy the chart code from 2.2.3. Creating a Plot, one for each cell below)\n\n\nShow the code\n(\n    ggplot(data=penguins, mapping=aes(x=\"flipper_length_mm\", y=\"body_mass_g\"))\n    + geom_point()\n)\n\n\n\n   \n       \n       \n       \n   \n   \n          \n   \n   \n\n\n\nScatterplot for penguin data\n\n\nShow the code\n(\n    ggplot(\n        data=penguins,\n        mapping=aes(x=\"flipper_length_mm\", y=\"body_mass_g\", color=\"species\"),\n    )\n    + geom_point()\n)\n\n\n\n   \n       \n       \n       \n   \n   \n          \n   \n   \n\n\n\n\n\nShow the code\n(\n    ggplot(\n        data=penguins,\n        mapping=aes(x=\"flipper_length_mm\", y=\"body_mass_g\", color=\"species\"),\n    )\n    + geom_point()\n    + geom_smooth(method=\"lm\")\n)\n\n\n\n   \n       \n       \n       \n   \n   \n          \n   \n   \n\n\n\n\n\nShow the code\n(\n    ggplot(data=penguins, mapping=aes(x=\"flipper_length_mm\", y=\"body_mass_g\"))\n    + geom_point(mapping=aes(color=\"species\"))\n    + geom_smooth(method=\"lm\")\n)\n\n\n\n   \n       \n       \n       \n   \n   \n          \n   \n   \n\n\n\n\n\nShow the code\n(\n    ggplot(data=penguins, mapping=aes(x=\"flipper_length_mm\", y=\"body_mass_g\"))\n    + geom_point(mapping=aes(color=\"species\", shape=\"species\"))\n    + geom_smooth(method=\"lm\")\n)"
  },
  {
    "objectID": "250_projects.html",
    "href": "250_projects.html",
    "title": "DS250 Projects",
    "section": "",
    "text": "Project 3 - Late Flights and Missing Data (JSON)\nProject 4 - Can you Predict That?\nProject 5 - The War with StarWars",
    "crumbs": [
      "DS250 Projects"
    ]
  },
  {
    "objectID": "250_projects.html#repo-for-my-projects",
    "href": "250_projects.html#repo-for-my-projects",
    "title": "DS250 Projects",
    "section": "",
    "text": "Project 3 - Late Flights and Missing Data (JSON)\nProject 4 - Can you Predict That?\nProject 5 - The War with StarWars",
    "crumbs": [
      "DS250 Projects"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "index.html#title-2-header",
    "href": "index.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "Templates/P3_template.html",
    "href": "Templates/P3_template.html",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "",
    "text": "Show the code\nimport pandas as pd\nimport numpy as np\nfrom lets_plot import *\n\nLetsPlot.setup_html(isolated_frame=True)\nShow the code\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\ndf = pd.read_json(\"https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json\")"
  },
  {
    "objectID": "Templates/P3_template.html#elevator-pitch",
    "href": "Templates/P3_template.html#elevator-pitch",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "Elevator pitch",
    "text": "Elevator pitch\nA SHORT (2-3 SENTENCES) PARAGRAPH THAT DESCRIBES KEY INSIGHTS TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS. (Note: this is not a summary of the project, but a summary of the results.)\nA Client has requested this analysis and this is your one shot of what you would say to your boss in a 2 min elevator ride before he takes your report and hands it to the client."
  },
  {
    "objectID": "Templates/P3_template.html#questiontask-1",
    "href": "Templates/P3_template.html#questiontask-1",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "QUESTION|TASK 1",
    "text": "QUESTION|TASK 1\nFix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”). In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the “NaN” for at least one missing value.__\ntype your results and analysis here\n\n\nShow the code\ndf_clean = df.replace([\"\", \"NA\", \"NaN\", None], np.nan)\n\nexample_record = df_clean.iloc[[0]].to_json(orient=\"records\")\nprint(example_record)\n\n\n[{\"airport_code\":\"ATL\",\"airport_name\":\"Atlanta, GA: Hartsfield-Jackson Atlanta International\",\"month\":\"January\",\"year\":2005.0,\"num_of_flights_total\":35048,\"num_of_delays_carrier\":\"1500+\",\"num_of_delays_late_aircraft\":-999,\"num_of_delays_nas\":4598,\"num_of_delays_security\":10,\"num_of_delays_weather\":448,\"num_of_delays_total\":8355,\"minutes_delayed_carrier\":116423.0,\"minutes_delayed_late_aircraft\":104415,\"minutes_delayed_nas\":207467.0,\"minutes_delayed_security\":297,\"minutes_delayed_weather\":36931,\"minutes_delayed_total\":465533}]"
  },
  {
    "objectID": "Templates/P3_template.html#questiontask-2",
    "href": "Templates/P3_template.html#questiontask-2",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "QUESTION|TASK 2",
    "text": "QUESTION|TASK 2\nWhich airport has the worst delays? Describe the metric you chose, and why you chose it to determine the “worst” airport. Your answer should include a summary table that lists (for each airport) the total number of flights, total number of delayed flights, proportion of delayed flights, and average delay time in hours.\ntype your results and analysis here\n\n\nShow the code\n# Task 2: worst airport by proportion & average delay\ndf2 = df_clean.copy()\n\n# compute total minutes delayed across all categories\ndelay_min_cols = [\n    \"minutes_delayed_carrier\", \"minutes_delayed_late_aircraft\",\n    \"minutes_delayed_nas\",     \"minutes_delayed_security\",\n    \"minutes_delayed_weather\"\n]\ndf2[\"total_delay_mins\"] = df2[delay_min_cols].sum(axis=1)\n\nsummary = (\n    df2\n      .groupby(\"airport_code\")\n      .agg(\n         total_flights    = (\"num_of_flights_total\", \"sum\"),\n         delayed_flights  = (\"num_of_delays_total\",   \"sum\"),\n         total_delay_mins = (\"total_delay_mins\",      \"sum\"),\n      )\n      .assign(\n         prop_delayed    = lambda d: d[\"delayed_flights\"] / d[\"total_flights\"],\n         avg_delay_hours = lambda d: (d[\"total_delay_mins\"] / d[\"delayed_flights\"]) / 60\n      )\n      .reset_index()\n)\n\nprint(summary.sort_values(\"prop_delayed\", ascending=False))\n\n\n  airport_code  total_flights  delayed_flights  total_delay_mins  \\\n5          SFO        1630945           425604        25853438.0   \n3          ORD        3597588           830825        54598084.0   \n0          ATL        4430047           902443        52769237.0   \n2          IAD         851571           168467         9862739.0   \n4          SAN         917862           175132         8043504.0   \n1          DEN        2513974           468519        24562692.0   \n6          SLC        1403384           205160         9822243.0   \n\n   prop_delayed  avg_delay_hours  \n5      0.260955         1.012421  \n3      0.230939         1.095258  \n0      0.203710         0.974563  \n2      0.197831         0.975734  \n4      0.190804         0.765471  \n1      0.186366         0.873771  \n6      0.146189         0.797934"
  },
  {
    "objectID": "Templates/P3_template.html#questiontask-3",
    "href": "Templates/P3_template.html#questiontask-3",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "QUESTION|TASK 3",
    "text": "QUESTION|TASK 3\nWhat is the best month to fly if you want to avoid delays of any length? Describe the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month. (To answer this question, you will need to remove any rows that are missing the Month variable.)\ntype your results and analysis here\n\n\nShow the code\ndf3 = df_clean.dropna(subset=[\"month\"]).copy()\n\nmonth_summary = (\n    df3\n      .groupby(\"month\")\n      .agg(\n         total_flights   = (\"num_of_flights_total\", \"sum\"),\n         delayed_flights = (\"num_of_delays_total\",   \"sum\"),\n      )\n      .assign(\n         prop_delayed = lambda d: d[\"delayed_flights\"] / d[\"total_flights\"]\n      )\n      .reset_index()\n)\n\nmonth_order = [\n    \"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\n    \"July\",\"August\",\"September\",\"October\",\"November\",\"December\"\n]\nmonth_summary[\"month\"] = pd.Categorical(\n    month_summary[\"month\"],\n    categories=month_order,\n    ordered=True\n)\n\nbest_month = month_summary.loc[month_summary[\"prop_delayed\"].idxmin(), \"month\"]\nprint(f\"Best month to fly: {best_month}\")\n\nfrom lets_plot import ggplot, aes, geom_bar, labs\n\np3 = (\n    ggplot(month_summary, aes(x=\"month\", y=\"prop_delayed\"))\n    + geom_bar(stat=\"identity\")\n    + labs(\n        x=\"Month\",\n        y=\"Proportion of Flights Delayed\",\n        title=\"Flight Delay Proportion by Month\"\n    )\n)\n\np3\n\n\nBest month to fly: September"
  },
  {
    "objectID": "Templates/P3_template.html#questiontask-4",
    "href": "Templates/P3_template.html#questiontask-4",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "QUESTION|TASK 4",
    "text": "QUESTION|TASK 4\nAccording to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild). You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations:\na. 100% of delayed flights in the Weather category are due to weather  \na. 30% of all delayed flights in the Late-Arriving category are due to weather  \na. From April to August, 40% of delayed flights in the NAS category are due to weather. The rest of the months, the proportion rises to 65%    \ntype your results and analysis here\n\n\nShow the code\n# Task 4: Compute total number of flights delayed by weather (severe + mild)\n\n# 1) Copy and parse month names to numbers\ndf4 = df_clean.copy()\ndf4[\"month_num\"] = pd.to_datetime(\n    df4[\"month\"], format=\"%B\", errors=\"coerce\"\n).dt.month\n\n# 2) Convert delay-count columns to numeric, fill late-aircraft missing with mean\nfor col in [\n    \"num_of_delays_late_aircraft\",\n    \"num_of_delays_nas\",\n    \"num_of_delays_weather\"\n]:\n    df4[col] = pd.to_numeric(df4[col], errors=\"coerce\")\n\nmean_late = df4[\"num_of_delays_late_aircraft\"].mean()\ndf4[\"num_of_delays_late_aircraft\"] = df4[\"num_of_delays_late_aircraft\"].fillna(mean_late)\ndf4[\"num_of_delays_nas\"]     = df4[\"num_of_delays_nas\"].fillna(0)\ndf4[\"num_of_delays_weather\"] = df4[\"num_of_delays_weather\"].fillna(0)\n\n# 3) Vectorized proportion for NAS\nnas_prop = np.where(df4[\"month_num\"].between(4, 8), 0.40, 0.65)\n\n# 4) Compute total weather delays\ndf4[\"weather_delay_count\"] = (\n    df4[\"num_of_delays_weather\"]                     # 100% severe\n  + df4[\"num_of_delays_late_aircraft\"] * 0.30         # 30% late‐aircraft\n  + df4[\"num_of_delays_nas\"] * nas_prop               # NAS proportion\n)\n\n# 5) Show first 5 rows\ndf4.loc[:, [\n    \"airport_code\", \"month\", \"month_num\",\n    \"num_of_delays_weather\",\n    \"num_of_delays_late_aircraft\",\n    \"num_of_delays_nas\",\n    \"weather_delay_count\"\n]].head()\n\n\n\n\n\n\n\n\n\nairport_code\nmonth\nmonth_num\nnum_of_delays_weather\nnum_of_delays_late_aircraft\nnum_of_delays_nas\nweather_delay_count\n\n\n\n\n0\nATL\nJanuary\n1.0\n448\n-999\n4598\n3137.00\n\n\n1\nDEN\nJanuary\n1.0\n233\n928\n935\n1119.15\n\n\n2\nIAD\nJanuary\n1.0\n61\n1058\n895\n960.15\n\n\n3\nORD\nJanuary\n1.0\n306\n2255\n5415\n4502.25\n\n\n4\nSAN\nJanuary\n1.0\n56\n680\n638\n674.70\n\n\n\n\n\n\n\n\n\nShow the code\n# Include and execute your code here\n\n\n\n\nShow the code\n# Include and execute your code here"
  },
  {
    "objectID": "Templates/P3_template.html#questiontask-5",
    "href": "Templates/P3_template.html#questiontask-5",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "QUESTION|TASK 5",
    "text": "QUESTION|TASK 5\nUsing the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Describe what you learn from this graph.\ntype your results and analysis here\n\n\nShow the code\n# Task 5: Barplot of proportion of all flights delayed by weather per airport\n\n# 1) Flag rows with any weather delays\ndf5 = df4.copy()\ndf5[\"weather_flag\"] = df5[\"weather_delay_count\"] &gt; 0\n\n# 2) Aggregate by airport\nplot_data = (\n    df5\n      .groupby(\"airport_code\")\n      .agg(\n         total_flights        = (\"num_of_flights_total\", \"sum\"),\n         total_weather_delays = (\"weather_delay_count\",    \"sum\")\n      )\n      .assign(\n         prop_weather_delay = lambda d: d[\"total_weather_delays\"] / d[\"total_flights\"]\n      )\n      .reset_index()\n)\n\n# 3) Plot\nfrom lets_plot import ggplot, aes, geom_bar, labs\n\np5 = (\n    ggplot(plot_data, aes(x=\"airport_code\", y=\"prop_weather_delay\"))\n    + geom_bar(stat=\"identity\")\n    + labs(\n        x=\"Airport\",\n        y=\"Proportion of Flights Delayed by Weather\",\n        title=\"Weather-Related Delay Proportion by Airport\"\n    )\n)\n\np5"
  },
  {
    "objectID": "Templates/P3_template.html#stretch-questiontask-1",
    "href": "Templates/P3_template.html#stretch-questiontask-1",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "STRETCH QUESTION|TASK 1",
    "text": "STRETCH QUESTION|TASK 1\nWhich delay is the worst delay? Create a similar analysis as above for Weahter Delay with: Carrier Delay and Security Delay. Compare the proportion of delay for each of the three categories in a Chart and a Table. Describe your results.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here"
  },
  {
    "objectID": "Templates/P1_template.html",
    "href": "Templates/P1_template.html",
    "title": "Client Report - What’s in a Name?",
    "section": "",
    "text": "Show the code\nimport pandas as pd\nimport numpy as np\nfrom lets_plot import *\n\nLetsPlot.setup_html(isolated_frame=True)"
  },
  {
    "objectID": "Templates/P1_template.html#project-notes",
    "href": "Templates/P1_template.html#project-notes",
    "title": "Client Report - What’s in a Name?",
    "section": "Project Notes",
    "text": "Project Notes\nFor Project 1 the answer to each question should include a chart and a written response. The years labels on your charts should not include a comma. At least two of your charts must include reference marks.\n\n\nShow the code\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\ndf = pd.read_csv(\"https://github.com/byuidatascience/data4names/raw/master/data-raw/names_year/names_year.csv\")"
  },
  {
    "objectID": "Templates/P1_template.html#questiontask-1",
    "href": "Templates/P1_template.html#questiontask-1",
    "title": "Client Report - What’s in a Name?",
    "section": "QUESTION|TASK 1",
    "text": "QUESTION|TASK 1\nHow does your name at your birth year compare to its use historically?\nMy name “Aidan” was not used very often before my birth year of 2001, but shot up in popularity in the early 2000s.\n\n\nShow the code\n# Include and execute your code here\n\naidan = df[df['name'] == 'Aidan']\n\nggplot(aidan, aes(x='year', y='Total')) + \\\ngeom_line(color='blue') + \\\ngeom_vline(xintercept=2001, color=\"red\", linetype=\"dashed\") + \\\nscale_x_continuous(format=\"d\") + \\\nggtitle(\"The name 'Aidan' Over Time\")"
  },
  {
    "objectID": "Templates/P1_template.html#questiontask-2",
    "href": "Templates/P1_template.html#questiontask-2",
    "title": "Client Report - What’s in a Name?",
    "section": "QUESTION|TASK 2",
    "text": "QUESTION|TASK 2\nIf you talked to someone named Brittany on the phone, what is your guess of his or her age? What ages would you not guess?\nIf I talked to someone named Brittany on the phone, I would guess she was born in 1990, making her 35 years old. Based on the graph, I would not guess that she is older than 45 or younger than 25.\n\n\nShow the code\n# Include and execute your code here\n\nbrittany = df[df['name'] == 'Brittany']\n\nggplot(brittany, aes(x='year', y='Total')) + \\\ngeom_line(color='blue') + \\\nscale_x_continuous(format=\"d\") + \\\nggtitle(\"Name Usage Over Time for 'Brittany'\") + \\\nxlab(\"Year\") + ylab(\"Total Names\")"
  },
  {
    "objectID": "Templates/P1_template.html#questiontask-3",
    "href": "Templates/P1_template.html#questiontask-3",
    "title": "Client Report - What’s in a Name?",
    "section": "QUESTION|TASK 3",
    "text": "QUESTION|TASK 3\nMary, Martha, Peter, and Paul are all Christian names. From 1920 - 2000, compare the name usage of each of the four names in a single chart. What trends do you notice?\nMary was the most popular of the 4 names. All 4 names dropped in popularity over time, but Mary dropped the most.\n\n\nShow the code\nnames = df[df[\"name\"].isin([\"Mary\", \"Martha\", \"Peter\", \"Paul\"])]\n\nnames = names[(names[\"year\"] &gt;= 1920) & (names[\"year\"] &lt;= 2000)]\n\n(ggplot(names, aes(x=\"year\", y=\"Total\", color=\"name\")) + \\\n geom_line(size=1.2) + \\\n scale_x_continuous(format=\"d\") + \\\n ggtitle(\"Trends of Mary, Martha, Peter, and Pau(1920–2000)\") + \\\n xlab(\"Year\") + ylab(\"Total Names\"))"
  },
  {
    "objectID": "Templates/P1_template.html#questiontask-4",
    "href": "Templates/P1_template.html#questiontask-4",
    "title": "Client Report - What’s in a Name?",
    "section": "QUESTION|TASK 4",
    "text": "QUESTION|TASK 4\nThink of a unique name from a famous movie. Plot the usage of that name and see how changes line up with the movie release. Does it look like the movie had an effect on usage?\nThis graph shows that the name “Tony” was at its’ most popular around 1960, with a sharp decline afterward. I thought the relase of Iron Man in 2008 would have some effect; however, it seems it changed nothing and the name continued to drop in popularity after the movie.\n\n\nShow the code\ntony = df[df[\"name\"] == \"Tony\"]\n\n(ggplot(tony, aes(x=\"year\", y=\"Total\")) + \\\n geom_line(color=\"red\") + \\\n geom_vline(xintercept=2008, color=\"black\", linetype=\"dashed\") + \\\n scale_x_continuous(format=\"d\") + \\\n ggtitle(\"Did Iron Man Boost the Name 'Tony'?\") + \\\n xlab(\"Year\") + \\\n ylab(\"Total Named Tony\"))"
  },
  {
    "objectID": "Templates/P1_template.html#stretch-questiontask-1",
    "href": "Templates/P1_template.html#stretch-questiontask-1",
    "title": "Client Report - What’s in a Name?",
    "section": "STRETCH QUESTION|TASK 1",
    "text": "STRETCH QUESTION|TASK 1\nReproduce the chart Elliot using the data from the names_year.csv file.\nThe name Elliot seemed to lose popularity after the release of the first E.T. It gained popularity after the second release, fell back down, and then really started to rise in 2000 at the third release. It is difficult to deteermine if the movie releases contribute to the name’s popularity because it seems to rise and fall independent of the movie releases.\n\n\nShow the code\nelliot = df[df[\"name\"] == \"Elliot\"].copy()\nelliot[\"label\"] = \"Elliot\" \n\nannotations = pd.DataFrame({\n    \"year\": [1981, 1986, 2003], \n    \"Total\": [1250, 1250, 1250],\n    \"label\": [\"E.T Released\", \"Second\", \"Third\"],\n    \"hjust\": [1, 0, 0]  \n})\n\nplot = (\n    ggplot(elliot, aes(x=\"year\", y=\"Total\", color=\"label\")) +\n    geom_line(size=1.2, alpha=0.7) +\n\n    geom_vline(xintercept=1982, color=\"red\", linetype=\"dashed\", size=1) +\n    geom_vline(xintercept=1985, color=\"red\", linetype=\"dashed\", size=1) +\n    geom_vline(xintercept=2002, color=\"red\", linetype=\"dashed\", size=1) +\n\n    geom_text(\n        data=annotations,\n        mapping=aes(x=\"year\", y=\"Total\", label=\"label\", hjust=\"hjust\"),\n        color=\"black\", size=7\n    ) +\n\n    scale_color_manual(values={\"Elliot\": \"blue\"}) +\n    scale_x_continuous(format=\"d\") +\n    ggtitle(\"Elliot... What?\") +\n    xlab(\"year\") + ylab(\"Total\")\n)\n\nplot"
  },
  {
    "objectID": "Templates/DS250_Template.html",
    "href": "Templates/DS250_Template.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "THIS .qmd IS INSTRUCTIONAL AND SHOULD NOT BE USED TO WRITE YOUR REPORTS (EXCEPTION - PROJECT 0). THERE IS ANOTHER TEMPLATE FILE FOR THAT. YOU WILL NEED TO PREVIEW THE REPORT TO PRODUCE A .html FILE. YOU WILL SUBMIT THE .html FILE ON CANVAS."
  },
  {
    "objectID": "Templates/DS250_Template.html#elevator-pitch",
    "href": "Templates/DS250_Template.html#elevator-pitch",
    "title": "Client Report - [Insert Project Title]",
    "section": "Elevator pitch",
    "text": "Elevator pitch\nA SHORT (2-3 SENTENCES) PARAGRAPH THAT DESCRIBES KEY INSIGHTS TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS. (Note: this is not a summary of the project, but a summary of the results.)\nA Client has requested this analysis and this is your one shot of what you would say to your boss in a 2 min elevator ride before he takes your report and hands it to the client.\n\n\nRead and format project data\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\n# Note: using the URL is the easiest way for the data to still work in GitHub\n# You may download the file and reference it by name but only if you save it in the same folder as your .qmd file\nurl = 'https://raw.githubusercontent.com/byuidatascience/data4python4ds/master/data-raw/mpg/mpg.csv'\ndf = pd.read_csv(url)\n\n\nHighlight the Questions and Tasks"
  },
  {
    "objectID": "Templates/DS250_Template.html#questiontask-1",
    "href": "Templates/DS250_Template.html#questiontask-1",
    "title": "Client Report - [Insert Project Title]",
    "section": "Question|Task 1",
    "text": "Question|Task 1\nCOPY PASTE QUESTION|TASK 1 FROM THE PROJECT HERE\nAdd details here to answer the question but NOT like an assignment Q&A. You need to write your answers as a consulting solution report. A Client needs to understand the answer, but also needs to understand the decisions that went into the answer (when applicable).\ninclude figures in chunks and discuss your findings in the figure.\n\nYOU SHOULD HAVE QUALITY WRITING THAT DESCRIBES YOUR CHARTS AND TABLES.\nWE HIGHLY RECOMMEND GRAMMARLY TO FIX YOUR SPELLING AND GRAMMAR. WRITING TAKES TIME TO BE CLEAR. SPEND THE TIME TO PRACITCE.\nYOU SHOULD HAVE QUALITY COMMENTS THAT DESCRIBES YOUR CODES. OFTEN CODEERS WORK IN TEAMS AND YOU NEED TO HAVE QUALTIY COMMENTS FOR YOUR TEAM AND YOURSELF. YOU MAY NEED TO REVISIT CODE YOU WROTE OVER A YEAR AGO, AND IF YOU DONT COMMENT IT NOW YOU WONT REMEMBER WHY YOU DID WHAT YOU DID.\n\n\n\nRead and format data\n# Include and execute your code here"
  },
  {
    "objectID": "Templates/DS250_Template.html#questiontask-2",
    "href": "Templates/DS250_Template.html#questiontask-2",
    "title": "Client Report - [Insert Project Title]",
    "section": "Question|Task 2",
    "text": "Question|Task 2\nCOPY PASTE QUESTION|TASK 2 FROM THE PROJECT HERE\n\ninclude figures in chunks and discuss your findings in the figure.\n\n\n\nplot example\n# Include and execute your code here\n\n(\n  ggplot(df.head(500), aes(x='displ', y='hwy')) + geom_point()\n)\n\n\n\n  \n  \n    \n    \n    \n      \n        \n          \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n          \n        \n        \n          \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n          \n        \n      \n      \n        \n          \n            \n              \n                \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n              \n            \n          \n        \n        \n          \n            \n            \n          \n        \n      \n      \n        \n          \n            \n            \n            \n              \n                2\n              \n            \n          \n          \n            \n            \n            \n              \n                3\n              \n            \n          \n          \n            \n            \n            \n              \n                4\n              \n            \n          \n          \n            \n            \n            \n              \n                5\n              \n            \n          \n          \n            \n            \n            \n              \n                6\n              \n            \n          \n          \n            \n            \n            \n              \n                7\n              \n            \n          \n          \n          \n        \n        \n          \n            \n              \n                15\n              \n            \n          \n          \n            \n              \n                20\n              \n            \n          \n          \n            \n              \n                25\n              \n            \n          \n          \n            \n              \n                30\n              \n            \n          \n          \n            \n              \n                35\n              \n            \n          \n          \n            \n              \n                40\n              \n            \n          \n          \n            \n              \n                45\n              \n            \n          \n        \n      \n    \n    \n      \n        hwy\n      \n    \n    \n      \n        displ\n      \n    \n    \n    \n  \n  \n  \n\nMy useless chart"
  },
  {
    "objectID": "Templates/DS250_Template.html#questiontask-3",
    "href": "Templates/DS250_Template.html#questiontask-3",
    "title": "Client Report - [Insert Project Title]",
    "section": "Question|Task 3",
    "text": "Question|Task 3\nCOPY PASTE QUESTION|TASK 3 FROM THE PROJECT HERE\n\nPROVIDE TABLES THAT HELP ADDRESS THE QUESTIONS AND TASKS (IF APPLICABLE).\n\n\n\ntable example\n# Include and execute your code here\nmydat = (df.head(1000)\n    .groupby('manufacturer')\n    .sum()\n    .reset_index()\n    .tail(10)\n    .filter([\"manufacturer\",\"displ\",\"cty\", \"hwy\"])\n)\n\ndisplay(mydat)\n\n\n\n\n\n\ntable example\n\n\n\nmanufacturer\ndispl\ncty\nhwy\n\n\n\n\n5\nhyundai\n34.0\n261\n376\n\n\n6\njeep\n36.6\n108\n141\n\n\n7\nland rover\n17.2\n46\n66\n\n\n8\nlincoln\n16.2\n34\n51\n\n\n9\nmercury\n17.6\n53\n72\n\n\n10\nnissan\n42.5\n235\n320\n\n\n11\npontiac\n19.8\n85\n132\n\n\n12\nsubaru\n34.4\n270\n358\n\n\n13\ntoyota\n100.4\n630\n847\n\n\n14\nvolkswagen\n60.9\n565\n789"
  },
  {
    "objectID": "Templates/DS250_Template.html#questiontask-4",
    "href": "Templates/DS250_Template.html#questiontask-4",
    "title": "Client Report - [Insert Project Title]",
    "section": "Question|Task 4",
    "text": "Question|Task 4\nCOPY PASTE QUESTION|TASK 3 FROM THE PROJECT HERE\n\nPROVIDE TABLES THAT HELP ADDRESS THE QUESTIONS AND TASKS (IF APPLICABLE).\n\n\n\ntable example\n# Include and execute your code here\n\n\nNote: Non executing Python Snippets include (3) ``` followed by (3) more ```, each on their own line. These are not single quotes, they are the key left of the number 1 key on the keyboard. The top row can include the language of code that is pasted inbetween the ``` marks.\nNote: These also work in Slack and it is expected they are used for any code shared in that app. No screen shots allowed."
  },
  {
    "objectID": "250_Projects/project3.html",
    "href": "250_Projects/project3.html",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "",
    "text": "Show the code\nimport pandas as pd \nimport numpy as np\nimport sqlite3\nfrom lets_plot import *\n\nLetsPlot.setup_html(isolated_frame=True)\nShow the code\n# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n\n# Include and execute your code here\nsqlite_file = 'lahmansbaseballdb.sqlite'\n# this file must be in the same location as your .qmd or .py file\ncon = sqlite3.connect(sqlite_file)",
    "crumbs": [
      "DS250 Projects",
      "Project 3"
    ]
  },
  {
    "objectID": "250_Projects/project3.html#elevator-pitch",
    "href": "250_Projects/project3.html#elevator-pitch",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "Elevator pitch",
    "text": "Elevator pitch\nA SHORT (2-3 SENTENCES) PARAGRAPH THAT DESCRIBES KEY INSIGHTS TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS. (Note: this is not a summary of the project, but a summary of the results.)\nA Client has requested this analysis and this is your one shot of what you would say to your boss in a 2 min elevator ride before he takes your report and hands it to the client.",
    "crumbs": [
      "DS250 Projects",
      "Project 3"
    ]
  },
  {
    "objectID": "250_Projects/project3.html#questiontask-1",
    "href": "250_Projects/project3.html#questiontask-1",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "QUESTION|TASK 1",
    "text": "QUESTION|TASK 1\nWrite an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 3"
    ]
  },
  {
    "objectID": "250_Projects/project3.html#questiontask-2",
    "href": "250_Projects/project3.html#questiontask-2",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "QUESTION|TASK 2",
    "text": "QUESTION|TASK 2\nThis three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)\na. Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.\na. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.\na. Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here\n\n\n\n\nShow the code\n# Include and execute your code here\n\n\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 3"
    ]
  },
  {
    "objectID": "250_Projects/project3.html#questiontask-3",
    "href": "250_Projects/project3.html#questiontask-3",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "QUESTION|TASK 3",
    "text": "QUESTION|TASK 3\nPick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Lets-Plot to visualize the comparison. What do you learn?\ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 3"
    ]
  },
  {
    "objectID": "250_Projects/project3.html#stretch-questiontask-1",
    "href": "250_Projects/project3.html#stretch-questiontask-1",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "STRETCH QUESTION|TASK 1",
    "text": "STRETCH QUESTION|TASK 1\nAdvanced Salary Distribution by Position (with Case Statement):\n* Write an SQL query that provides a summary table showing the average salary for players in each position (e.g., pitcher, catcher, outfielder) across all years. Include the following columns:\n\n    * position\n    * average_salary\n    * total_players\n    * highest_salary  \n\n* The highest_salary column should display the highest salary ever earned by a player in that position. If no player in that position has a recorded salary, display “N/A” for the highest salary.  \n\n* Additionally, create a new column called salary_category using a case statement:  \n\n    * If the average salary is above $1 million, categorize it as “High Salary.”  \n    * If the average salary is between $500,000 and $1 million, categorize it as “Medium Salary.”  \n    * Otherwise, categorize it as “Low Salary.”  \n\n* Order the table by average salary in descending order.\n* Print the top 10 rows of this summary table.  \ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 3"
    ]
  },
  {
    "objectID": "250_Projects/project3.html#stretch-questiontask-2",
    "href": "250_Projects/project3.html#stretch-questiontask-2",
    "title": "Client Report - Late Flights & Missing Data (JSON)",
    "section": "STRETCH QUESTION|TASK 2",
    "text": "STRETCH QUESTION|TASK 2\nAdvanced Career Longevity and Performance (with Subqueries):\n* Calculate the average career length (in years) for players who have played at least one game. Then, identify the top 10 players with the longest careers (based on the number of years they played). Include their:  \n\n    * playerID\n    * first_name\n    * last_name\n    * career_length\n\n* The career_length should be calculated as the difference between the maximum and minimum yearID for each player. \ntype your results and analysis here\n\n\nShow the code\n# Include and execute your code here",
    "crumbs": [
      "DS250 Projects",
      "Project 3"
    ]
  },
  {
    "objectID": "250_Projects/project6.html",
    "href": "250_Projects/project6.html",
    "title": "Aidan Pfunder - Data Science Portfolio",
    "section": "",
    "text": "Here is a link to my GitHub portfolio: GitHub Portfolio\n\n\n\n\n Back to top"
  }
]