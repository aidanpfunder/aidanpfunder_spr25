---
title: "Client Report - Late Flights & Missing Data (JSON)"
subtitle: "Course DS 250"
author: "Aidan Pfunder"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd
import numpy as np
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
df = pd.read_json("https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json")
```

## Elevator pitch
I performed data analysis on flight delays to determine the most and elast reliable airports to travel out of. I also calculated the best month to avoid the most delays and what airports have the highest proportion of weather delays.

## QUESTION|TASK 1

__Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”).__ In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the "NaN" for at least one missing value.__  

Here I have cleaned up the data to replace all N/A values with NaN. Here is an example line from the data in JSON format with the NaN value. 

```{python}

df_clean = df.replace(["", "NA", -999, None], np.nan)

df_display = df_clean.fillna("NaN")

example_row = df_display[df_display.eq("NaN").any(axis=1)].iloc[[0]]

print(example_row.to_json(orient="records"))

```


## QUESTION|TASK 2

__Which airport has the worst delays?__ Describe the metric you chose, and why you chose it to determine the “worst” airport. Your answer should include a summary table that lists (for each airport) the total number of flights, total number of delayed flights, proportion of delayed flights, and average delay time in hours.   

To determine the worst airport, I calculated two metrics that together show which airport is the worst. The two metrics are proportion of flights delayed (delayed_flights/total_flights) and average delay in hours. From this data, SFO is the worst airport in terms of the proportion of flights delayed, and it has the second worst average delay time.
```{python}

df2 = df_clean.copy()

delay_min_cols = [
    "minutes_delayed_carrier", "minutes_delayed_late_aircraft",
    "minutes_delayed_nas",     "minutes_delayed_security",
    "minutes_delayed_weather"
]
df2["total_delay_mins"] = df2[delay_min_cols].sum(axis=1)

summary = (
    df2
      .groupby("airport_code")
      .agg(
         total_flights    = ("num_of_flights_total", "sum"),
         delayed_flights  = ("num_of_delays_total",   "sum"),
         total_delay_mins = ("total_delay_mins",      "sum"),
      )
      .assign(
         prop_delayed    = lambda d: d["delayed_flights"] / d["total_flights"],
         avg_delay_hours = lambda d: (d["total_delay_mins"] / d["delayed_flights"]) / 60
      )
      .reset_index()
)

print(summary.sort_values("prop_delayed", ascending=False))



```



## QUESTION|TASK 3

__What is the best month to fly if you want to avoid delays of any length?__ Describe the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month. (To answer this question, you will need to remove any rows that are missing the `Month` variable.)  

To determine the best month to fly, I used the same metric I used previously: the proportion of flights delayed to the total number of flights. The bar chart shows that September has the lowest proportion of delayed flights, and therefore it is the best month to fly.

```{python}


df3 = df_clean.dropna(subset=["month"]).copy()

month_summary = (
    df3
      .groupby("month")
      .agg(
         total_flights   = ("num_of_flights_total", "sum"),
         delayed_flights = ("num_of_delays_total",   "sum"),
      )
      .assign(
         prop_delayed = lambda d: d["delayed_flights"] / d["total_flights"]
      )
      .reset_index()
)

month_order = [
    "January","February","March","April","May","June",
    "July","August","September","October","November","December"
]
month_summary["month"] = pd.Categorical(
    month_summary["month"],
    categories=month_order,
    ordered=True
)

best_month = month_summary.loc[month_summary["prop_delayed"].idxmin(), "month"]
print(f"Best month to fly: {best_month}")

from lets_plot import ggplot, aes, geom_bar, labs

p3 = (
    ggplot(month_summary, aes(x="month", y="prop_delayed"))
    + geom_bar(stat="identity")
    + labs(
        x="Month",
        y="Proportion of Flights Delayed",
        title="Flight Delay Proportion by Month"
    )
)

p3


```



## QUESTION|TASK 4

According to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. __Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild).__ You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations:  

    a. 100% of delayed flights in the Weather category are due to weather  
    a. 30% of all delayed flights in the Late-Arriving category are due to weather  
    a. From April to August, 40% of delayed flights in the NAS category are due to weather. The rest of the months, the proportion rises to 65%    

For January at ATL, an average of 1,109 late-aircraft delays plus 4,598 NAS delays and 448 severe-weather delays combine into about 3,769 total weather-related delay counts under our assumptions. Across airports, ORD shows the highest weather-delay total (~4,502), while SAN has the lowest (~675).
```{python}

df4 = df_clean.copy()
df4["month_num"] = pd.to_datetime(
    df4["month"], format="%B", errors="coerce"
).dt.month

for col in [
    "num_of_delays_late_aircraft",
    "num_of_delays_nas",
    "num_of_delays_weather"
]:
    df4[col] = pd.to_numeric(df4[col], errors="coerce")

mean_late = df4["num_of_delays_late_aircraft"].mean()
df4["num_of_delays_late_aircraft"] = df4["num_of_delays_late_aircraft"].fillna(mean_late)

df4["num_of_delays_nas"]     = df4["num_of_delays_nas"].fillna(0)
df4["num_of_delays_weather"] = df4["num_of_delays_weather"].fillna(0)


```


```{python}

nas_prop = np.where(df4["month_num"].between(4, 8), 0.40, 0.65)

df4["weather_delay_count"] = (
    df4["num_of_delays_weather"]                     
  + df4["num_of_delays_late_aircraft"] * 0.30         
  + df4["num_of_delays_nas"] * nas_prop               
)


```


```{python}

df4.loc[
    :5, 
    [
      "airport_code", "month", "month_num",
      "num_of_delays_weather",
      "num_of_delays_late_aircraft",
      "num_of_delays_nas",
      "weather_delay_count"
    ]
]


```



## QUESTION|TASK 5

__Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Describe what you learn from this graph.__  

From this analysis and graph, we can see the proportion of flights at each airport that are delayed due to the total weather delay count I calculated previously. SFO airport shows the worst here with a 9.79% proportion of dealyed flights due to weather.
```{python}

df5 = df4.copy()
df5["weather_flag"] = df5["weather_delay_count"] > 0

plot_data = (
    df5
      .groupby("airport_code")
      .agg(
         total_flights        = ("num_of_flights_total", "sum"),
         total_weather_delays = ("weather_delay_count",    "sum")
      )
      .assign(
         prop_weather_delay = lambda d: d["total_weather_delays"] / d["total_flights"]
      )
      .reset_index()
)

from lets_plot import ggplot, aes, geom_bar, labs

p5 = (
    ggplot(plot_data, aes(x="airport_code", y="prop_weather_delay"))
    + geom_bar(stat="identity")
    + labs(
        x="Airport",
        y="Proportion of Flights Delayed by Weather",
        title="Weather-Related Delay Proportion by Airport"
    )
)

p5

```


---


## STRETCH QUESTION|TASK 1

__Which delay is the worst delay?__ Create a similar analysis as above for Weahter Delay with: Carrier Delay and Security Delay. Compare the proportion of delay for each of the three categories in a Chart and a Table. Describe your results.

_type your results and analysis here_

```{python}


```

---

