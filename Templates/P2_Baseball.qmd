---
title: "Client Report - Finding Relationships in Baseball"
subtitle: "Course DS 250"
author: "Aidan Pfunder"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---
Have you ever wondered what secrets lie hidden in the data behind baseball? I've written custom SQL queries in Python to show the standout players from BYU-Idaho, calculate batting averages, and compare average salaries between top teams like the Yankees and Red Sox. 

```{python}
import pandas as pd 
import numpy as np
import sqlite3
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
sqlite_file = 'lahmansbaseballdb.sqlite'
# this file must be in the same location as your .qmd or .py file
con = sqlite3.connect(sqlite_file)
```

## QUESTION|TASK 1

__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__  

_type your results and analysis here_

```{python}
query_byu_idaho_salaries = """
SELECT
  collegeplaying.playerID,
  collegeplaying.schoolID,
  salaries.salary,
  salaries.yearID,
  salaries.teamID
FROM collegeplaying
JOIN salaries
  ON collegeplaying.playerID = salaries.playerID
WHERE collegeplaying.schoolID = 'idbyuid'
ORDER BY salaries.salary DESC;
"""
df_byu_idaho_salaries = pd.read_sql_query(query_byu_idaho_salaries, con)
print(df_byu_idaho_salaries)



```


## QUESTION|TASK 2

__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)__  
    a. Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.  
    a. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.  
    a. Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.  

_type your results and analysis here_

```{python}
query_season_batting_ab1 = """
SELECT
  playerID,
  yearID,
  CAST(H AS FLOAT) / AB AS batting_avg
FROM batting
WHERE AB >= 1
ORDER BY batting_avg DESC, playerID
LIMIT 5;
"""
df_season_batting_ab1 = pd.read_sql_query(query_season_batting_ab1, con)
print(df_season_batting_ab1)

```

```{python}
query_season_batting_ab10 = """
SELECT
  playerID,
  yearID,
  CAST(H AS FLOAT) / AB AS batting_avg
FROM batting
WHERE AB >= 10
ORDER BY batting_avg DESC, playerID
LIMIT 5;
"""
df_season_batting_ab10 = pd.read_sql_query(query_season_batting_ab10, con)
print(df_season_batting_ab10)


```

```{python}
query_career_batting_avg = """
SELECT
  playerID,
  SUM(H)   AS total_hits,
  SUM(AB)  AS total_at_bats,
  SUM(H)*1.0/SUM(AB) AS batting_avg
FROM batting
GROUP BY playerID
HAVING SUM(AB) >= 100
ORDER BY batting_avg DESC
LIMIT 5
"""
df_career_batting_avg = pd.read_sql_query(query_career_batting_avg, con)
print(df_career_batting_avg)


```


## QUESTION|TASK 3

__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Lets-Plot to visualize the comparison. What do you learn?__

I compared the average salaries between the Boston Red Sox and the New York Yankees. I learned that the New York Yankees have started paying their players significantly mkore on average since 2002. Both teams have increased their average salaries over time. 

```{python}
from lets_plot import *
LetsPlot.setup_html(isolated_frame=True)

query_team_salary = """
SELECT
  yearID,
  teamID,
  AVG(salary) AS avg_salary
FROM salaries
WHERE teamID IN ('NYA', 'BOS')
GROUP BY yearID, teamID
ORDER BY yearID, teamID;
"""
df_team_salary = pd.read_sql_query(query_team_salary, con)
print(df_team_salary)

plot_salary_compare = (
    ggplot(df_team_salary, aes(x='yearID', y='avg_salary', fill='teamID')) +
    geom_bar(stat='identity', position='dodge') +
    labs(
      x = "Season Year",
      y = "Average Salary",
      title = "Average Player Salary: Yankees vs Red Sox"
    )
)
plot_salary_compare.show()

```

---

## STRETCH QUESTION|TASK 1

__Advanced Salary Distribution by Position (with Case Statement):__  

    * Write an SQL query that provides a summary table showing the average salary for each position (e.g., pitcher, catcher, outfielder). Position information can be found in the fielding table in the POS column. 
    
        Include the following columns:

        * position
        * average_salary
        * total_players
        * highest_salary  

    * The highest_salary column should display the highest salary ever earned by a player in that position. 

    * Additionally, create a new column called salary_category using a case statement:  

        * If the average salary is above $3 million, categorize it as “High Salary.”
        * If the average salary is between $2 million and $3 million, categorize it as “Medium Salary.”
        * Otherwise, categorize it as “Low Salary.”  

    * Order the table by average salary in descending order.

    **Hint:** Beware, it is common for a player to play multiple positions in a single year. For this analysis, each player’s salary should only be counted toward one position in a given year: the position at which they played the most games that year. This will likely require a (sub-query)[https://docs.data.world/documentation/sql/concepts/advanced/WITH.html].

    

This shows that first base players have the highest average salary for baseball players. It is interested that although the highest paid player is a pitcher, pitchers rank 4th according to average salaries. This may be because pitcher has the highest number of players, meaning that they cannot all be top earners. 

```{python}

query_salary_by_position_named = """
WITH primary_pos AS (
  SELECT
    playerID,
    yearID,
    POS       AS pos,
    SUM(G)    AS games_played,
    ROW_NUMBER() OVER (
      PARTITION BY playerID, yearID
      ORDER BY SUM(G) DESC
    ) AS rn
  FROM fielding
  GROUP BY playerID, yearID, POS
)
SELECT
  CASE primary_pos.pos
    WHEN 'P'  THEN 'Pitcher'
    WHEN 'C'  THEN 'Catcher'
    WHEN '1B' THEN 'First Base'
    WHEN '2B' THEN 'Second Base'
    WHEN 'SS' THEN 'Shortstop'
    WHEN '3B' THEN 'Third Base'
    WHEN 'LF' THEN 'Left Field'
    WHEN 'CF' THEN 'Center Field'
    WHEN 'RF' THEN 'Right Field'
    WHEN 'DH' THEN 'Designated Hitter'
    ELSE primary_pos.pos
  END AS position,
  AVG(salaries.salary)               AS average_salary,
  COUNT(DISTINCT salaries.playerID)  AS total_players,
  MAX(salaries.salary)               AS highest_salary,
  CASE
    WHEN AVG(salaries.salary) > 3000000 THEN 'High Salary'
    WHEN AVG(salaries.salary) >= 2000000 THEN 'Medium Salary'
    ELSE 'Low Salary'
  END AS salary_category
FROM salaries
JOIN primary_pos
  ON salaries.playerID = primary_pos.playerID
 AND salaries.yearID   = primary_pos.yearID
WHERE primary_pos.rn = 1
GROUP BY position
ORDER BY average_salary DESC;
"""

df_salary_by_position_named = pd.read_sql_query(query_salary_by_position_named, con)
print(df_salary_by_position_named)


```


## STRETCH QUESTION|TASK 2

__Advanced Career Longevity and Performance (with Subqueries):__

    * Calculate the average career length (in years) for players who have played at least **10 games**. Then, identify the top 10 players with the longest careers (based on the number of years they played). Include their: 

        * playerID
        * first_name
        * last_name
        * career_length

    * The career_length should be calculated as the difference between the maximum and minimum yearID for each player.  

The top ten longest carreers for baseball players is dominated by older players. Of the ten, six of them began their careers in the 1800s with two more beginning before 1904. The player with the logest career is Jim O'Rourke with 32 years, who began his career in 1872. This could be a sign that modern players do not last as long in their career due to more intense play or stricter work out regiments. 

```{python}

query_career_longevity_with_start = """
WITH career_stats AS (
  SELECT
    playerID,
    MIN(yearID)               AS first_year,
    MAX(yearID)               AS last_year,
    (MAX(yearID) - MIN(yearID)) AS career_length,
    SUM(G)                    AS total_games
  FROM fielding
  GROUP BY playerID
  HAVING SUM(G) >= 10
)
SELECT
  cs.playerID,
  p.nameFirst     AS first_name,
  p.nameLast      AS last_name,
  cs.first_year   AS start_year,
  cs.career_length
FROM career_stats AS cs
JOIN people AS p
  ON cs.playerID = p.playerID
ORDER BY cs.career_length DESC
LIMIT 10;
"""

df_career_longevity_with_start = pd.read_sql_query(query_career_longevity_with_start, con)
print(df_career_longevity_with_start)



```

---

